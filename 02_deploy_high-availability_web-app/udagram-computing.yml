Description: >
  This template deploys the computing resources required for project 2

Parameters:
  EnvironmentName:
    Description: The environment name that will be prefixed to resource names
    Type: String

  AppServerImageId:
    Description: The AMI id for the application servers (default Ubuntu 18.04 LTS)
    Type: String
    Default: ami-0fc20dd1da406780b

  AppServerInstanceType:
    Description: The instance type for the application servers
    Type: String
    Default: t2.medium

  AppServerDiskSize:
    Description: The disk size for the application servers
    Type: Number
    Default: 10

  AppServerKeyName:
    Description: >
      The (already existing) SSH key to be associated with application servers. If left empty, it will not be possible
      to log directly into application servers.
    Type: String

  UdacityS3BucketName:
    Description: The S3 bucket where to retrieve application server source code
    Type: String
    Default: udacity-demo-1

  BastionHostKeyName:
    Description: The (already existing) SSH key to be associated with bastion host.
    Type: String

  BastionHostAccessCIDR:
    Description: The IP range (CIDR notation) that is allowed to SSH into bastion host.
    Type: String

Conditions:
  KeyNameProvided: !Not [!Equals ["", !Ref AppServerKeyName]]

Resources:
  AppServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Role for allowing an EC2 instance to read-only the contents of Udacity S3 Bucket.
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: UdacityS3ReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref UdacityS3BucketName
                      - "/udacity.zip"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  # instance profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  AppServerProfileWithRoles:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${EnvironmentName}-APP-SERVER-PROFILE
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  # define a launch template for application servers
  AppServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-App-Server-Template
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: !Ref AppServerDiskSize
        IamInstanceProfile:
          Name: !Ref AppServerProfileWithRoles
        ImageId: !Ref AppServerImageId
        InstanceType: !Ref AppServerInstanceType
        SecurityGroupIds:
          - !Ref AppServerSecGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://${UdacityS3BucketName}/udacity.zip .
            unzip -o udacity.zip
        # add SSH key only if parameter is non-empty
        KeyName: !If
          - KeyNameProvided
          - !Ref AppServerKeyName
          - !Ref AWS::NoValue

  # create at autoscaling group of application servers spanning across the the AZs and deployed in the respective
  # private subnets, not to be visible directly from outside the VPC
  WebAppAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Web-App-Group
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref AppServerLaunchTemplate
        Version: !GetAtt AppServerLaunchTemplate.LatestVersionNumber
      MinSize: "4"
      MaxSize: "4"
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}
          PropagateAtLaunch: true

  # create a target group defining the logic to health-checking the web app through a load balancer. this will be
  # associated with the autoscaling group, s.t. any instances belonging to the latter will be health-checked
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPC"

  # create a security group for the load balancer, allowing ingoing/outgoing requests through port 80
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # create a load balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NET-1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-NET-2"
      SecurityGroups:
        - Ref: LBSecGroup

  # define a load balancer listener to forward traffic coming from port 80 to the target group
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP

  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1

  # create a bastion host to be able to SSH into app servers deployed in private subnets
  BastionHostSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from local only
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionHostAccessCIDR
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AppServerImageId
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref BastionHostSecGroup
      SubnetId:
        Fn::ImportValue: !Sub ${EnvironmentName}-PUB-NET-1
      KeyName: !Ref BastionHostKeyName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host

  BastionHostEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::ImportValue: !Sub ${EnvironmentName}-BH-IP
      InstanceId: !Ref BastionHost

Outputs:
  WebAppURL:
    Description: The URL of the web app load balancer
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-URL

  BastionHostDNSName:
    Description: The DNS name of the bastion host
    Value: !GetAtt BastionHost.PublicDnsName
    Export:
      Name: !Sub ${EnvironmentName}-BH-DNS
